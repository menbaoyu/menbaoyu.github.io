---
layout: post
title: Linux基础
tag: linux
date: 2018-06-12 13:26:00
---

## 层级结构

1.  硬件

   ​	运算器、控制器、存储器、输入设备和输出设备，提供运算、储存能力。

2.  内核

   ​	把硬件提供的运算、储存能力抽象出来提供给上层软件，内核是操作系统工作的基础，是基于硬件的第一层软件，为其他软件提供进程管理、内存管理、硬件驱动、网络功能、文件系统、安全机制等。

   ​	上层软件一般不直接使用内核提供的功能，因为直接基于内核开发会使开发难度提高很多。如果上层软件直接使用内核的功能，就叫做系统调用。

   

3.  API

   ​	API即Application Programming Interface（应用程序编程接口，也叫做库），它的意义是把内核的功能封装起来，提供给上层应用，这样开发人员就无需了解内核的工作机制，只需要调用API即可。

   ​	API不能单独运行，必须有程序调用它。在windows和linux系统中都有许多API，windows中是.dll文件（dynamic link library  动态链接库），linux中是.so文件（shared object 共享对象）。

4. 上层应用

   ​	调用API的程序，如shell等。这类程序会调用内核和API的功能，来完成与硬件的交互，如解析鼠标双击，播放音频等。

## Linux的命令

​	shell是提供给用户的与操作系统交互的操作界面，无论是GUI（Graphical User Interface 图形用户接口）还是CLI（Command-line Interface 命令行接口）都是shell的一种，shell是一个命令解析器，这个解析器有很多种，sh、bash、csh、zsh、ksh、tcsh等。

​	shell会不断询问是否有键盘输入，用户以enter结束键盘输入后，shell程序以空格为分隔符，将命令拆解为命令、选项和参数。接着判断命令是否存在，如果存在，则fork一个子进程进行系统调用，通过exec()把命令交给内核，内核进行判断，该命令该用户是否有权限执行。如果exec()返回，则该命令没有正常执行，输出错误信息。父进程等待子进程结束，并打印信息。

命令格式：

1.  命令

    命令本身，例如：`docker`

2.  选项

    选项的作用是修正命令的执行方式，有短选项和长选项之分。

    短选项通过一个`-`加一个字符引导，可以组合。例如 `docker run -i -t` 等于 `docker run -it` ，其中的`-i -t`就是短选项。

    长选项通过`--`和一个单词引导，不可组合。例如`docker run -it -- name`中的`--name`就是长选项。

3.  参数

    参数的作用是指明命令的作用对象。

    例如 `docker run -it --name test image`其中的`image`就是指明了docker命令作用的镜像名。

   命令的选项和参数都是可选的，如`ls` 如果不加选项和参数的话就默认横向列出当前目录的文件及目录信息。